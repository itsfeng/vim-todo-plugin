*vim-todo-lists.txt*    Version 0.1.0
*vim-todo-lists*

Plugin for TODO lists management.

==============================================================================
CONTENTS                                                  *VimTodoListsContents*

1. Introduction .... |VimTodoListsIntroduction|
2. Installation .... |VimTodoListsInstallation|
3. Usage ........... |VimTodoListsUsage|
4. Contribution .... |VimTodoListsContribution|
5. License ......... |VimTodoListsLicense|
6. Changelog ....... |VimTodoListsChangelog|
7. Contributors .... |VimTodoListsContributors|

==============================================================================
1. Introduction                                       *VimTodoListsIntroduction*

vim-todo-lists plugin is intended for TODO lists management.

Current version contains only key bindings that simplify the navigation
between TODO list (should have '.todo.md' extension) items, creation and
update.

==============================================================================
2. Installation                                       *VimTodoListsInstallation*

Plug:

add the following to your .vimrc config

```
call plug#begin('~/.vim/plugged')
plug 'itsfeng/vim-todo-lists'
call plug#end()
```

In vim run:

```
:PlugInstall
```


==============================================================================
3. Usage                                                     *VimTodoListsUsage*

Plugin is automatically applied for files with `.todo.md` extension.

TODO Items
----------

The following example represents TODO items definition by default.

Example
-------

- [ ] Not done
- [X] Done

Custom Configuration
--------------------

You can customize the representation of the item by defining the following variables
to your `.vimrc`

let g:VimTodoListsUndoneItem = '- [X]'
let g:VimTodoListsDoneItem = '- [V]'

Important Item
--------------

Important item is defined as 'undone item string !'.

```
- [ ] ! Important item
```

Items Hierarchy
---------------

If one item has lesser indentation than the next one then the first one is meant
to be 'parent' and the second to be 'child'.

Example
-------

- [ ] Parent
  - [ ] Child1
  - [ ] Child2

Rules:
* Changing state of the parent item changes the state of all children items accorndantly
* If all children items are marked done, parent will also be marked as done
* If parent is marked as done and one of the children changes state to not done
  parent will also be marked as not done


Items Highlighting
------------------

Items are highlighted in accordance to the following scheme:
List of all schemes available via `:h group-name`

- [ ] ! Important item (Statement)
- [ ] Normal item (Normal)
- [X] Done item (Comment)
#someTag (Typedef)
MPA-XXX (Define)
[MEET] (Number)


Items moving on state change
----------------------------

By default item when its status is changed is moved in the list in accordance
to the following rules

Mark item done
--------------

Item marked as done is moved to the end of all done items list.
If done list doesn't exist, item is placed just after the last not done item.

Before
------

- [ ] Not Done 1
- [ ] Will be done now
- [ ] Not Done 2
- [X] Done

After
-----

- [ ] Not Done 1
- [ ] Not Done 2
- [X] Done
- [X] Will be done now

Mark item undone
----------------

Undone item is moved to the end of all not done items list.
If all items are marked done, the items is moved before the first done item.

Before
------

- [ ] Not Done 1
- [ ] Not Done 2
- [X] Done
- [X] Will be undone now

After
-----

- [ ] Not Done 1
- [ ] Not Done 2
- [ ] Will be done now
- [X] Done

Interaction with items hierarchy
--------------------------------

This feature also affect the items in hierarchy in accordance to the rules above.

Disable the items moving
------------------------

If you don't want items to be moved after state change, you may add the following
line into your .vimrc file:

let g:VimTodoListsMoveItems = 0


Commands
--------
	*:VimTodoListsCreateNewItemAbove* *:VimTodoListsCreateNewItemBelow*
		*:VimTodoListsCreateNewItem* *:VimTodoListsGoToNextItem*
		*:VimTodoListsGoToPreviousItem* *:VimTodoListsToggleItem*
		*:VimTodoListsIncreaseIndent* *:VimTodoListsDecreaseIndent*

* :VimTodoListsCreateNewItemAbove - creates a new item in a line above cursor
* :VimTodoListsCreateNewItemBelow - creates a new item in a line below cursor
* :VimTodoListsCreateNewItem      - creates a new item in current line
* :VimTodoListsGoToNextItem       - go to the next item
* :VimTodoListsGoToPreviousItem   - go to the previous item
* :VimTodoListsToggleItem         - toggles the current item (or selected items
                                    in visual mode)
* :VimTodoListsIncreaseIndent     - increases the indent of current line
* :VimTodoListsDecreaseIndent     - decreases the indent of current line


Default key bindings
--------------------

Item editing mode
-----------------

* j - go to next item
* k - go to previous item
* <Space> - toggle current item
* <Tab> - increases the indent of current (or selected) line(s)
* <Shift-Tab> - decreases the indent of current (or selected) line(s)
* <CR> - create new item in insert mode
* <leader>e - switch to normal editing mode

Normal editing mode
-------------------

* j, k, o, O, <CR> - no special behavior
* <Space> - toggle current item
* <leader>e - switch to item editing mode

Custom key mappings
-------------------

The `g:VimTodoListsCustomKeyMapper` variable should contain a name of the function
implementing custom mappings.

Example
-------

let g:VimTodoListsCustomKeyMapper = 'VimTodoListsCustomMappings'

function! VimTodoListsCustomMappings()
  nnoremap <buffer> s :VimTodoListsToggleItem<CR>
  nnoremap <buffer> <Space> :VimTodoListsToggleItem<CR>
  noremap <buffer> <leader>e :silent call VimTodoListsSetItemMode()<CR>
endfunction

Automatic date insertion
------------------------

Automatic date insertion may be enabled by setting the following in .vimrc:

let g:VimTodoListsDatesEnabled = 1

Date format may be changed by setting the format variable to a valid
strftime() string:

let g:VimTodoListsDatesFormat = "%a %b, %Y"

==============================================================================
4. Contribution                                       *VimTodoListsContribution*

Source code and issues are hosted on GitHub:

https://github.com/itsfeng/vim-todo-lists

If you are going to make a pull request, you should use `dev` branch for
functionality implementation to simplify the merge procedure.

==============================================================================
5. License                                                 *VimTodoListsLicense*

MIT License

Copyright (c) 2018 Alexander Serebryakov (alex.serebr@gmail.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
